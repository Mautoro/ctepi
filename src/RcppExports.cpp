// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CTEprobcpp
List CTEprobcpp(int n1, int n2, double a1, double b1, double a2, double b2, NumericVector p);
RcppExport SEXP _ctepi_CTEprobcpp(SEXP n1SEXP, SEXP n2SEXP, SEXP a1SEXP, SEXP b1SEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(CTEprobcpp(n1, n2, a1, b1, a2, b2, p));
    return rcpp_result_gen;
END_RCPP
}
// aggregate_cpp
NumericMatrix aggregate_cpp(NumericVector values, NumericVector groups, NumericVector levelgroup);
RcppExport SEXP _ctepi_aggregate_cpp(SEXP valuesSEXP, SEXP groupsSEXP, SEXP levelgroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type levelgroup(levelgroupSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_cpp(values, groups, levelgroup));
    return rcpp_result_gen;
END_RCPP
}
// ldbudboptimCpp
List ldbudboptimCpp(NumericVector z_values, Function F1, Function F2, Function F3, Function F4, NumericVector x_limit, NumericVector y_limit, double delta, Nullable<NumericVector> sopY);
RcppExport SEXP _ctepi_ldbudboptimCpp(SEXP z_valuesSEXP, SEXP F1SEXP, SEXP F2SEXP, SEXP F3SEXP, SEXP F4SEXP, SEXP x_limitSEXP, SEXP y_limitSEXP, SEXP deltaSEXP, SEXP sopYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z_values(z_valuesSEXP);
    Rcpp::traits::input_parameter< Function >::type F1(F1SEXP);
    Rcpp::traits::input_parameter< Function >::type F2(F2SEXP);
    Rcpp::traits::input_parameter< Function >::type F3(F3SEXP);
    Rcpp::traits::input_parameter< Function >::type F4(F4SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_limit(x_limitSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_limit(y_limitSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type sopY(sopYSEXP);
    rcpp_result_gen = Rcpp::wrap(ldbudboptimCpp(z_values, F1, F2, F3, F4, x_limit, y_limit, delta, sopY));
    return rcpp_result_gen;
END_RCPP
}
// massCpp
NumericMatrix massCpp(NumericMatrix matriz);
RcppExport SEXP _ctepi_massCpp(SEXP matrizSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matriz(matrizSEXP);
    rcpp_result_gen = Rcpp::wrap(massCpp(matriz));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ctepi_CTEprobcpp", (DL_FUNC) &_ctepi_CTEprobcpp, 7},
    {"_ctepi_aggregate_cpp", (DL_FUNC) &_ctepi_aggregate_cpp, 3},
    {"_ctepi_ldbudboptimCpp", (DL_FUNC) &_ctepi_ldbudboptimCpp, 9},
    {"_ctepi_massCpp", (DL_FUNC) &_ctepi_massCpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ctepi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
